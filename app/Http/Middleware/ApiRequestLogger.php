<?php
namespace App\Http\Middleware;

use Closure;
use Illuminate\Http\Request;
use Monolog\Formatter\LineFormatter;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use Illuminate\Support\Str;

/**
 * @author Elton
 * Class ApiRequestLogger
 * Logs incoming requests to file under dir /storage/logs
 * @package App\Http\Middleware
 */

class ApiRequestLogger
{
    /**
     * @var Logger
     */
    private $logger;
    public function __construct()
    {
        $this->logger = $this->getLogger();
    }

    /**
     * Handle an incoming request.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  \Closure  $next
     * @return mixed
     */
    public function handle(Request $request, Closure $next)
    {
        $this->logger->info('INCOMING REQUEST:');
        $url = $request->url();
        $ip = $request->ip();
        $method = $request->method();
        $headers = $this->requestedHeaders();
        $queryString = $request->getQueryString();
        $methodUrlString = "$ip $method $url";
        if ($queryString) {
            $methodUrlString .= "?$queryString";
        }
        if (array_key_exists('Authorization', $headers)) {
            $headers['Authorization'] = 'xxxxxxx';
        }
        $body = $request->getContent();
        $this->logger->info($methodUrlString);
        $this->logger->info(json_encode($headers));
        $this->logger->info($body);
        return $next($request);
    }

    /**
     * Requested HTTP Headers
     * @return array
     */
    private function requestedHeaders()
    {
        $headers = [];
        foreach ($_SERVER as $key => $value) {
            if (substr($key, 0, 5) <> 'HTTP_') {
                continue;
            }
            $header = str_replace(' ', '-', ucwords(str_replace('_', ' ', strtolower(substr($key, 5)))));
            $headers[$header] = $value;
        }
        return $headers;
    }

    /**
     * @return Logger
     */
    private function getLogger()
    {
        $dateString = now()->format('m_d_Y');//log file name generated by current day
        $filePath = 'ais_api_' . $dateString . '.log';//log file with daily rotation
        $dateFormat = "m/d/Y H:i:s";//Date format
        $output = "[%datetime%] %channel%.%level_name%: %message%\n";
        $formatter = new LineFormatter($output, $dateFormat);
        $stream = new StreamHandler(storage_path('logs/' . $filePath), Logger::DEBUG);
        $stream->setFormatter($formatter);
        $processId = Str::random(5);
        $logger = new Logger($processId);
        $logger->pushHandler($stream);
        return $logger;
    }
}
